# Leer la base de datos completa
mi_base <- read_excel(ruta)
# Verifica que los datos se han cargado
print(mi_base)  # Muestra las primeras filas
install.packages("readxl")
# Instalar y cargar el paquete
install.packages("readxl")  # Solo si no lo tienes instalado
library(readxl)
# Ruta del archivo (asegúrate de escribir correctamente la ubicación del archivo)
ruta <- "C:/Users/SALOME/Downloads/DatosSistemas2024_II.xlsx"  # Cambia esto según tu archivo
# Leer la base de datos completa
mi_base <- read_excel(ruta)
# Verifica que los datos se han cargado
print(mi_base)  # Muestra las primeras filas
install.packages("readxl")  # Solo ejecutarlo si no tienes instalado el paquete
library(readxl)
mi_data <- read_excel("C:/Users/SALOME/Downloads/DatosSistemas2024_II.xlsx")
# Paso 3: Ver las primeras filas de los datos para verificar la carga
head(mi_data)
View(mi_base)
View(mi_data)
# Supongamos que tienes una columna llamada "tipo" con los valores de texto que deseas codificar
mi_data$tipo <- factor(mi_data$tipo,
levels = c("transporte", "hotel", "polleria", "restaurante"),
labels = c(1, 2, 3, 4))
mi_data$tipo <- factor(mi_data$empresa,
levels = c("transporte", "hotel", "polleria", "restaurante"),
labels = c(1, 2, 3, 4))
mi_data$tipo <- factor(mi_data$empresa,
levels = c("transporte", "hotel", "pollería", "restaurante"),
labels = c(1, 2, 3, 4))
mi_data$tipo <- factor(mi_data$Empresa,
levels = c("transporte", "hotel", "pollería", "restaurante"),
labels = c(1, 2, 3, 4))
head(mi_data$tipo)
mi_data$Empresa <- factor(mi_data$Empresa,
levels = c("transporte", "hotel", "polleria", "restaurante"),
labels = c(1, 2, 3, 4))
# Codificar la columna 'region'
mi_data$region <- factor(mi_data$region,
levels = c("Tacna", "Arequipa", "Moquegua", "Cusco", "Puno"),
labels = c(1, 2, 3, 4, 5))
# Codificar la columna 'Ubicación'
mi_data$UbicacionEmpresa <- factor(mi_data$UbicacionEmpresa,
levels = c("centrica", "no centrica"),
labels = c(1, 2))
head(mi_data)
mi_data <- read_excel("C:/Users/SALOME/Downloads/DatosSistemas2024_II.xlsx")
head(mi_data)
head(mi_data)
# Codificar la columna 'Empresa'
mi_data$Empresa <- factor(mi_data$Empresa,
levels = c("transporte", "hotel", "polleria", "restaurante"),
labels = c(1, 2, 3, 4))
# Codificar la columna 'region'
mi_data$region <- factor(mi_data$region,
levels = c("Tacna", "Arequipa", "Moquegua", "Cusco", "Puno"),
labels = c(1, 2, 3, 4, 5))
# Codificar la columna 'Ubicación'
mi_data$UbicacionEmpresa <- factor(mi_data$UbicacionEmpresa,
levels = c("centrica", "no centrica"),
labels = c(1, 2))
# Verificar los resultados de las codificaciones
head(mi_data)
# Instalar los paquetes necesarios
if (!require("shiny")) install.packages("shiny")
if (!require("ggplot2")) install.packages("ggplot2")
library(shiny)
library(ggplot2)
# Interfaz de usuario
ui <- fluidPage(
titlePanel("Descenso de Gradiente: Teoría y Visualización"),
sidebarLayout(
sidebarPanel(
sliderInput("learning_rate", "Tasa de aprendizaje:",
min = 0.01, max = 1, value = 0.1, step = 0.01),
sliderInput("steps", "Número de iteraciones:",
min = 1, max = 100, value = 10, step = 1)
),
mainPanel(
h3("Teoría del Descenso de Gradiente"),
p("El descenso de gradiente es un algoritmo de optimización utilizado
para encontrar los valores mínimos (o máximos) de una función. La idea principal
es ajustar los parámetros de una función de modo que su costo sea mínimo."),
p("La fórmula principal es:"),
code("θ = θ - α * gradiente(θ)"),
p("Donde:"),
tags$ul(
tags$li("θ: Parámetros actuales."),
tags$li("α: Tasa de aprendizaje."),
tags$li("gradiente(θ): Derivada de la función respecto a los parámetros.")
),
h4("Visualización"),
plotOutput("gradient_plot")
)
)
)
# Lógica del servidor
server <- function(input, output) {
output$gradient_plot <- renderPlot({
# Función cuadrática para minimizar
f <- function(x) (x - 3)^2 + 4
# Derivada de la función
grad <- function(x) 2 * (x - 3)
# Inicialización
x_vals <- numeric(input$steps + 1)
x_vals[1] <- 0  # Punto inicial
# Descenso de gradiente
for (i in 1:input$steps) {
x_vals[i + 1] <- x_vals[i] - input$learning_rate * grad(x_vals[i])
}
# Calcular valores de la función
y_vals <- f(x_vals)
# Gráfico
x_seq <- seq(-2, 8, by = 0.1)
y_seq <- f(x_seq)
df <- data.frame(x = x_seq, y = y_seq)
ggplot(df, aes(x, y)) +
geom_line(color = "blue") +
geom_point(aes(x = x_vals, y = y_vals), color = "red", size = 3) +
geom_text(aes(x = x_vals, y = y_vals, label = round(y_vals, 2)),
vjust = -1, color = "red") +
labs(title = "Visualización del Descenso de Gradiente",
x = "Parámetro (θ)", y = "Costo f(θ)") +
theme_minimal()
})
}
# Ejecutar la aplicación
shinyApp(ui = ui, server = server)
# Instalar los paquetes necesarios
if (!require("shiny")) install.packages("shiny")
if (!require("ggplot2")) install.packages("ggplot2")
# Cargar las librerías
library(shiny)
library(ggplot2)
# Interfaz de usuario
ui <- fluidPage(
titlePanel("Descenso de Gradiente: Teoría y Visualización"),
sidebarLayout(
sidebarPanel(
sliderInput("learning_rate", "Tasa de aprendizaje:",
min = 0.01, max = 1, value = 0.1, step = 0.01),
sliderInput("steps", "Número de iteraciones:",
min = 1, max = 100, value = 10, step = 1)
),
mainPanel(
h3("Teoría del Descenso de Gradiente"),
p("El descenso de gradiente es un algoritmo de optimización utilizado
para encontrar los valores mínimos (o máximos) de una función. La idea principal
es ajustar los parámetros de una función de modo que su costo sea mínimo."),
p("La fórmula principal es:"),
code("θ = θ - α * gradiente(θ)"),
p("Donde:"),
tags$ul(
tags$li("θ: Parámetros actuales."),
tags$li("α: Tasa de aprendizaje."),
tags$li("gradiente(θ): Derivada de la función respecto a los parámetros.")
),
h4("Visualización"),
plotOutput("gradient_plot")
)
)
)
# Lógica del servidor
server <- function(input, output) {
output$gradient_plot <- renderPlot({
# Función cuadrática para minimizar
f <- function(x) (x - 3)^2 + 4
# Derivada de la función
grad <- function(x) 2 * (x - 3)
# Inicialización
x_vals <- numeric(input$steps + 1)
x_vals[1] <- 0  # Punto inicial
# Descenso de gradiente
for (i in 1:input$steps) {
x_vals[i + 1] <- x_vals[i] - input$learning_rate * grad(x_vals[i])
}
# Calcular valores de la función
y_vals <- f(x_vals)
# Gráfico
x_seq <- seq(-2, 8, by = 0.1)
y_seq <- f(x_seq)
df <- data.frame(x = x_seq, y = y_seq)
ggplot(df, aes(x, y)) +
geom_line(color = "blue") +
geom_point(aes(x = x_vals, y = y_vals), color = "red", size = 3) +
geom_text(aes(x = x_vals, y = y_vals, label = round(y_vals, 2)),
vjust = -1, color = "red") +
labs(title = "Visualización del Descenso de Gradiente",
x = "Parámetro (θ)", y = "Costo f(θ)") +
theme_minimal()
})
}
# Ejecutar la aplicación
shinyApp(ui = ui, server = server)
# Instalar los paquetes necesarios
if (!require("shiny")) install.packages("shiny")
if (!require("ggplot2")) install.packages("ggplot2")
source("~/.active-rstudio-document")
# Instalar los paquetes necesarios
if (!require("shiny")) install.packages("shiny")
install.packages("colorspace")
# Interfaz de usuario
ui <- fluidPage(
titlePanel("Descenso de Gradiente: Teoría y Visualización"),
sidebarLayout(
sidebarPanel(
sliderInput("learning_rate", "Tasa de aprendizaje:",
min = 0.01, max = 1, value = 0.1, step = 0.01),
sliderInput("steps", "Número de iteraciones:",
min = 1, max = 100, value = 10, step = 1)
),
mainPanel(
h3("Teoría del Descenso de Gradiente"),
p("El descenso de gradiente es un algoritmo de optimización utilizado
para encontrar los valores mínimos (o máximos) de una función. La idea principal
es ajustar los parámetros de una función de modo que su costo sea mínimo."),
p("La fórmula principal es:"),
code("θ = θ - α * gradiente(θ)"),
p("Donde:"),
tags$ul(
tags$li("θ: Parámetros actuales."),
tags$li("α: Tasa de aprendizaje."),
tags$li("gradiente(θ): Derivada de la función respecto a los parámetros.")
),
h4("Visualización"),
plotOutput("gradient_plot")
)
)
)
# Lógica del servidor
server <- function(input, output) {
output$gradient_plot <- renderPlot({
# Función cuadrática para minimizar
f <- function(x) (x - 3)^2 + 4
# Derivada de la función
grad <- function(x) 2 * (x - 3)
# Inicialización
x_vals <- numeric(input$steps + 1)
x_vals[1] <- 0  # Punto inicial
# Descenso de gradiente
for (i in 1:input$steps) {
x_vals[i + 1] <- x_vals[i] - input$learning_rate * grad(x_vals[i])
}
# Calcular valores de la función
y_vals <- f(x_vals)
# Gráfico
x_seq <- seq(-2, 8, by = 0.1)
y_seq <- f(x_seq)
df <- data.frame(x = x_seq, y = y_seq)
ggplot(df, aes(x, y)) +
geom_line(color = "blue") +
geom_point(aes(x = x_vals, y = y_vals), color = "red", size = 3) +
geom_text(aes(x = x_vals, y = y_vals, label = round(y_vals, 2)),
vjust = -1, color = "red") +
labs(title = "Visualización del Descenso de Gradiente",
x = "Parámetro (θ)", y = "Costo f(θ)") +
theme_minimal()
})
}
# Ejecutar la aplicación
shinyApp(ui = ui, server = server)
update.packages(ask = FALSE)
install.packages("ggplot2")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
# Cargar las librerías necesarias
library(shiny)
library(ggplot2)
# Interfaz de usuario
ui <- fluidPage(
titlePanel("Descenso de Gradiente: Teoría y Visualización"),
sidebarLayout(
sidebarPanel(
sliderInput("learning_rate", "Tasa de aprendizaje:",
min = 0.01, max = 1, value = 0.1, step = 0.01),
sliderInput("steps", "Número de iteraciones:",
min = 1, max = 100, value = 10, step = 1)
),
mainPanel(
h3("Teoría del Descenso de Gradiente"),
p("El descenso de gradiente es un algoritmo de optimización utilizado
para encontrar los valores mínimos (o máximos) de una función. La idea principal
es ajustar los parámetros de una función de modo que su costo sea mínimo."),
p("La fórmula principal es:"),
code("θ = θ - α * gradiente(θ)"),
p("Donde:"),
tags$ul(
tags$li("θ: Parámetros actuales."),
tags$li("α: Tasa de aprendizaje."),
tags$li("gradiente(θ): Derivada de la función respecto a los parámetros.")
),
h4("Visualización"),
plotOutput("gradient_plot")
)
)
)
# Lógica del servidor
server <- function(input, output) {
output$gradient_plot <- renderPlot({
# Función cuadrática para minimizar
f <- function(x) (x - 3)^2 + 4
# Derivada de la función
grad <- function(x) 2 * (x - 3)
# Inicialización
x_vals <- numeric(input$steps + 1)
x_vals[1] <- 0  # Punto inicial
# Descenso de gradiente
for (i in 1:input$steps) {
x_vals[i + 1] <- x_vals[i] - input$learning_rate * grad(x_vals[i])
}
# Calcular valores de la función
y_vals <- f(x_vals)
# Gráfico
x_seq <- seq(-2, 8, by = 0.1)
y_seq <- f(x_seq)
df <- data.frame(x = x_seq, y = y_seq)
ggplot(df, aes(x, y)) +
geom_line(color = "blue") +
geom_point(aes(x = x_vals, y = y_vals), color = "red", size = 3) +
geom_text(aes(x = x_vals, y = y_vals, label = round(y_vals, 2)),
vjust = -1, color = "red") +
labs(title = "Visualización del Descenso de Gradiente",
x = "Parámetro (θ)", y = "Costo f(θ)") +
theme_minimal()
})
}
# Ejecutar la aplicación Shiny
shinyApp(ui = ui, server = server)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
update.packages("dplyr")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
instalar.paquetes('rsconnect')
instalar.paquetes('rsconnect')
rsconnect::setAccountInfo(name='salomemargaretqh',
token='BEF70CBBF58FF742B2A97CDB6A9A83E7',
secret='ihpmw+ndOHjc81ClvevDea4q8OL8bQOh0TGz/4UO')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='salomemargaretqh',
token='BEF70CBBF58FF742B2A97CDB6A9A83E7',
secret='ihpmw+ndOHjc81ClvevDea4q8OL8bQOh0TGz/4UO')
source("~/.active-rstudio-document")
View(ui)
source("~/.active-rstudio-document")
install.packages("shiny")
source("~/.active-rstudio-document")
library(shiny)
# Función objetivo (parábola)
objetivo <- function(x) {
return((x - 3)^2 + 4)
}
# Derivada de la función objetivo
objetivo_derivada <- function(x) {
return(2 * (x - 3))
}
# Implementación del descenso de gradiente
descenso_gradiente <- function(punto_inicial, tasa_aprendizaje, iteraciones) {
historial <- numeric(iteraciones + 1)
historial[1] <- punto_inicial
for (i in 1:iteraciones) {
gradiente <- objetivo_derivada(historial[i])
nuevo_punto <- historial[i] - tasa_aprendizaje * gradiente
historial[i + 1] <- nuevo_punto
}
return(historial)
}
# Interfaz de usuario
ui <- fluidPage(
titlePanel("Descenso de Gradiente"),
sidebarLayout(
sidebarPanel(
h3("Concepto:"),
p("El algoritmo de descenso de gradiente es una técnica iterativa que permite encontrar el mínimo de una función. Cada paso mueve el valor actual en la dirección opuesta a la pendiente o gradiente de la función."),
p("En este caso, podemos ajustar el punto inicial, la tasa de aprendizaje y el número de iteraciones para ver cómo el algoritmo encuentra el mínimo."),
br(),
# Teoría más detallada
tags$h4(" ¿ Y cómo Funciona? "),
p("1. Empieza en un punto cualquiera."),
p("2. Calcula el gradiente, que es la pendiente en ese punto."),
p("3. Se mueve en la dirección opuesta al gradiente."),
p("4. Repite este proceso para mejorar el valor."),
p("Usa los controles para experimentar con diferentes puntos iniciales, tasas de aprendizaje y número de iteraciones."),
br(),
h4("Parametros"),
sliderInput("punto_inicial", "Punto inicial:", min = -6, max = 6, value = -5, step = 0.5),
sliderInput("tasa_aprendizaje", "Tasa de aprendizaje:", min = 0.01, max = 1, value = 0.1, step = 0.01),
sliderInput("iteraciones", "Número de iteraciones:", min = 1, max = 50, value = 30, step = 1),
actionButton("calcular", "Calcular")
),
mainPanel(
h3("Gráfico del Descenso de Gradiente"),
plotOutput("grafico"),
br(),
h4("Iteraciones de Descenso de Gradiente"),
tableOutput("tabla")
)
)
)
# Lógica del servidor
server <- function(input, output) {
resultados <- reactive({
input$calcular
isolate({
punto_inicial <- input$punto_inicial
tasa_aprendizaje <- input$tasa_aprendizaje
iteraciones <- input$iteraciones
historial <- descenso_gradiente(punto_inicial, tasa_aprendizaje, iteraciones)
data.frame(
Iteración = 0:iteraciones,
Punto = historial,
Valor = objetivo(historial)
)
})
})
output$grafico <- renderPlot({
datos <- resultados()
x_vals <- seq(-6, 6, length.out = 500)
plot(
x_vals, objetivo(x_vals), type = "l", col = "blue", lwd = 2,
xlab = "x", ylab = "f(x)", main = "Descenso de Gradiente"
)
points(datos$Punto, datos$Valor, col = "red", pch = 19)
lines(datos$Punto, datos$Valor, col = "red", lwd = 1, lty = 2)
legend("topright", legend = c("Función Objetivo", "Iteraciones"),
col = c("blue", "red"), lty = c(1, 2), pch = c(NA, 19), lwd = c(2, 1))
})
output$tabla <- renderTable({
resultados()
})
}
# Ejecutar la aplicación
shinyApp(ui = ui, server = server)
# Ejecutar la aplicación
shinyApp(ui = ui, server = server)
library(shiny); runApp('FINESI/5to semestre/METODOS DE OPTIMIZACION/R/descenso de gradiente.R')
getwd()
install.packages("dplyr")
list.files(path = getwd(), recursive = TRUE, full.names = TRUE) %>%
file.info() %>%
dplyr::arrange(desc(size))
install.packages("dplyr")
setwd("C:/Users/SALOME/Documents/FINESI/5to semestre/METODOS DE OPTIMIZACION/R")
setwd("C:/Users/SALOME/Documents/FINESI/5to semestre/METODOS DE OPTIMIZACION/R")
getwd()
library(dplyr)
list.files(path = getwd(), recursive = TRUE, full.names = TRUE) %>%
file.info() %>%
arrange(desc(size))
# Lista todos los archivos, incluyendo ocultos, y muestra los más grandes
archivos <- list.files(path = getwd(), recursive = TRUE, full.names = TRUE)
info_archivos <- file.info(archivos)
info_archivos[order(-info_archivos$size), ]  # Ordenado por tamaño
# Lista archivos con sus tamaños
archivos <- list.files(getwd(), recursive = TRUE, full.names = TRUE)
info_archivos <- file.info(archivos)
info_archivos <- info_archivos[order(-info_archivos$size), ]  # Ordenar por tamaño (mayor primero)
print(info_archivos)
# Lista todos los archivos y muestra su tamaño
archivos <- list.files(getwd(), recursive = TRUE, full.names = TRUE)
info_archivos <- file.info(archivos)
# Muestra los archivos más grandes (mayor tamaño primero)
info_archivos <- info_archivos[order(-info_archivos$size), ]
print(info_archivos[1, ])  # Mostrará el archivo más grande
# Listar todos los archivos con su tamaño en bytes
files <- list.files("C:/Users/SALOME/Documents/FINESI/5to semestre/METODOS DE OPTIMIZACION/R",
full.names = TRUE, recursive = TRUE)
file_sizes <- file.info(files)$size
# Mostrar los archivos más grandes
file_sizes[file_sizes > 1000000]  # Filtramos archivos mayores a 1MB
# Verificar el tamaño total del directorio
sum(file.info(files)$size)
# Mostrar todos los archivos y carpetas (subdirectorios) de forma recursiva
list.files(path = "C:/Users/SALOME/Documents/FINESI/5to semestre/METODOS DE OPTIMIZACION/R",
full.names = TRUE, recursive = TRUE)
rsconnect::deployApp("C:/Users/SALOME/Documents/FINESI/5to semestre/METODOS DE OPTIMIZACION/R")
rm(list = ls())
rsconnect::deployApp("C:/Users/SALOME/Documents/FINESI/5to semestre/METODOS DE OPTIMIZACION/R/descenso de gradiente.R")
rsconnect::deployApp("C:/Users/SALOME/Documents/FINESI/5to semestre/METODOS DE OPTIMIZACION/R/descenso de gradiente.R")
runApp('descenso de gradiente.R')
install.packages("shiny")
library(shiny); runApp('descenso de gradiente.R')
rsconnect::deployApp("C:/Users/SALOME/Documents/FINESI/5to semestre/METODOS DE OPTIMIZACION/R/descenso de gradiente.R")
runApp('~')
shiny::runApp()
# Listar los archivos en la carpeta que contiene tu aplicación
list.files(path = "C:/Users/SALOME/Documents/", recursive = TRUE, full.names = TRUE)
runApp('FINESI/ASTUDIO/CODIGO.R')
# app.R
library(shiny)
# UI (Interfaz de usuario)
ui <- fluidPage(
titlePanel("Mi Aplicación Shiny"),
sidebarLayout(
sidebarPanel(
h3("Panel lateral")
),
mainPanel(
plotOutput("grafico")
)
)
)
# Server (Lógica del servidor)
server <- function(input, output) {
output$grafico <- renderPlot({
plot(1:10)
})
}
# Ejecutar la aplicación Shiny
shinyApp(ui = ui, server = server)
runApp('FINESI/ASTUDIO/CODIGO.R')
